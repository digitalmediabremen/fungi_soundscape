//
// Copyright (c) 2013 Christopher Baker <https://christopherbaker.net>
//
// SPDX-License-Identifier:	MIT
//


#include "ofx/HTTP/DefaultProxyProcessor.h"
#include "ofx/HTTP/Request.h"
#include "ofx/HTTP/Response.h"
#include "ofx/HTTP/Context.h"


namespace ofx {
namespace HTTP {


DefaultProxyProcessor::DefaultProxyProcessor()
{
}


DefaultProxyProcessor::~DefaultProxyProcessor()
{
}


void DefaultProxyProcessor::requestFilter(Context& context, Request&) const
{
    context.setState(ClientState::DETECTING_PROXY);

    if (!context.getProxyRedirectURI().empty())
    {
        context.clientSession()->setProxy(context.getProxyRedirectURI().getHost(),
                                          context.getProxyRedirectURI().getPort());
    }
    else
    {
        const ProxySettings& proxySettings = context.getClientSessionSettings().getProxySettings();

        if (!proxySettings.getHost().empty())
        {
            context.clientSession()->setProxyHost(proxySettings.getHost());
        }

        if (proxySettings.getPort() != 0)
        {
            context.clientSession()->setProxyPort(proxySettings.getPort());
        }

        if (proxySettings.hasCredentials())
        {
            context.clientSession()->setProxyCredentials(proxySettings.getUsername(),
                                                         proxySettings.getPassword());
        }
    }
}


void DefaultProxyProcessor::responseFilter(Context& context,
                                           Request& request,
                                           Response& response) const
{
    // The requested resource MUST be accessed through the proxy
    // given by the Location field. The Location field gives the
    // URI of the proxy. The recipient is expected to repeat this
    // single request via the proxy. 305 responses MUST only be
    // generated by origin servers. Only use for one single request!

    if (response.getStatus() == Poco::Net::HTTPResponse::HTTP_USEPROXY)
    {
        if (context.getProxyRedirectURI().empty() && response.has("Location"))
        {
            Poco::URI proxyRedirectURI;
            proxyRedirectURI.resolve(response.get("Location"));
            context.setProxyRedirectURI(proxyRedirectURI);

            // Set the context to resubmit based on the proxy-redirect URI.
            context.setResubmit(true);
        }
        else
        {
            throw Poco::Net::HTTPException(response.getReasonForStatus(response.getStatus()),
                                           response.getStatus());
        }
    }
}


} } // namespace ofx::HTTP
